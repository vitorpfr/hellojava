package com.example.demo;

import javax.persistence.*;

// Entity annotation: maps this class to a table and creates it in the PostgreSQL - requires to also identify the primary key of the entity
// this sets entity name to be used in HQL (hibernate query language)
// good practice: specify entity name (default is equal to class name)

// Table annotation: optional, just specifies the name of the table in the PostgreSQL database and some other attributes
// if name (or Table annotation) is not provided, entity name will be used to create the table
// uniqueConstraits argument allows us to specify unique indexes name (if not provided, index of unique columns will have a random name)
// for this to work, we need to remove the unique = true of the column definition (weird, I believe it is better to have it there)

@Entity(name = "Student")
@Table(name = "student"
//        , uniqueConstraints = {
//        @UniqueConstraint(name = "student_email_unique", columnNames = "email"}
        )
public class Student {

    // this annotation defines the id field as the entity primary key, and creates an index for it
    @Id
    // this annotation creates a sequence that will auto-increase the new students primary key (which is the id)
    // so we don't have to pass an ID whenever we add a student to the table
    @SequenceGenerator(
            name = "student_sequence",
            sequenceName = "student_sequence",
            allocationSize = 1 // how much will the sequence increase from (1, 2, 3, 4, 5, etc...)
            // initial value default is already 1
    )
    // this annotation says that we will use a sequence to generate the id, and specifies the name of the sequence above
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "student_sequence"
    )

    // @Column annotation: not needed, but it is a good practice to specify column names for those properties instead of using defaults and set other useful properties
    @Column(name = "id", updatable = false)
    private long id;

    // nullable attribute can defines the column as non-nullable (default is nullable true)
    @Column(name = "first_name", nullable = false, columnDefinition = "TEXT")
    private String firstName;

    @Column(name = "last_name", nullable = false, columnDefinition = "TEXT")
    private String lastName;

    // now we have an unique constrait on the e-mail with this annotation
    // setting this column as unique also creates an index (btree) for it - to check, \d student in the postgresql console
    // when we run this for the 1st time after the table was already created, hibernate/jpa runs this automatically:
    // alter table student
    //       add constraint UK_fe0i52si7ybu0wjedj6motiim unique (email)
    @Column(name = "email", nullable = false, columnDefinition = "TEXT", unique = true)
    private String email;

    @Column(name = "age", nullable = false)
    private int age;

    public Student(String firstName, String lastName, String email, int age) {
//        this.id = id; // we don't need to have the id in the constructor because it is auto-generated by the sequence
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.age = age;
    }

    public Student() {
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", email='" + email + '\'' +
                ", age=" + age +
                '}';
    }
}
